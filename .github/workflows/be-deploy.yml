name: Yonsei-Golf DEV CI

on:
  push:
    branches: [ "feat/#74-logging" ]

env:
  WORKING_DIRECTORY: ./
  CODE_DEPLOY_APPLICATION_NAME: cicd
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: cicd
  S3_BUCKET_NAME: yg-img-storage

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set application properties
        run: |
          touch src/main/resources/application.properties
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.properties

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean build
        env:
          WORKING_DIRECTORY: ${{ env.WORKING_DIRECTORY }}

      - name:  docker build and push
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.DOCKER_USERNAME }}
          docker build --platform linux/amd64 -t hifit-ecr .
          docker tag hifit-ecr:latest ${{ secrets.DOCKER_USERNAME }}/hifit-ecr:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/hifit-ecr:latest

      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            sudo docker rm -f hifit-ecr
            sudo aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.DOCKER_USERNAME }}
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/hifit-ecr:latest
#            sudo docker run -d --name hifit-ecr -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/hifit-ecr:latest
            sudo docker run -d --name hifit-ecr -p 8080:8080 -v ~/be-log:/var/log ${{ secrets.DOCKER_USERNAME }}/hifit-ecr:latest
            sudo docker image prune -a -f
